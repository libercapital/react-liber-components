// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing Checkbox Styles should render correctly with props 1`] = `
<StyledComponent
  color="#000"
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "Checkboxstyles-sc-1kxp1mv-0",
        "isStatic": false,
        "rules": Array [
          "margin-top:16px;min-height:20px;*,*:before,*:after{box-sizing:border-box;}& input[type='checkbox']{display:none;}& input[type='checkbox']:checked + span:before{border-color:",
          [Function],
          ";background-color:",
          [Function],
          ";animation:",
          Keyframes {
            "id": "sc-keyframes-hVUBhf",
            "inject": [Function],
            "name": "hVUBhf",
            "rules": Array [
              "@-webkit-keyframes hVUBhf{0%{box-shadow:0px 0px 0px 1px rgba(0,0,0,0);}50%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0.1);}100%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0);}}",
              "@keyframes hVUBhf{0%{box-shadow:0px 0px 0px 1px rgba(0,0,0,0);}50%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0.1);}100%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0);}}",
            ],
            "toString": [Function],
          },
          " 0.2s linear forwards;}& input[type='checkbox']:checked + span:after{transform:rotateZ(37deg) scale(1);}& span{display:inline-flex;justify-content:flex-start;align-items:",
          [Function],
          ";height:20px;position:relative;padding:0 30px;margin-bottom:0;cursor:pointer;vertical-align:bottom;font-weight:normal;color:",
          [Function],
          ";font-size:",
          [Function],
          ";font-weight:",
          [Function],
          ";font-family:",
          [Function],
          ";}& span:before,& span:after{position:absolute;content:'';transition:all 0.3s ease;transition-property:transform,border-color;}& span:before{left:0;top:0;border-radius:4px;width:20px;height:20px;border:1px solid ",
          [Function],
          ";background-color:",
          [Function],
          ";}& span:after{top:1px;left:6px;width:7px;height:14px;transform:rotateZ(37deg) scale(0);border-top:2px solid transparent;border-left:2px solid transparent;border-right:2px solid #fafafa;border-bottom:2px solid #fafafa;}",
        ],
      },
      "displayName": "Checkboxstyles",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "Checkboxstyles-sc-1kxp1mv-0",
      "target": "label",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
  labelColor="#000"
/>
`;

exports[`Testing Checkbox Styles should render correctly without props 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "Checkboxstyles-sc-1kxp1mv-0",
        "isStatic": false,
        "rules": Array [
          "margin-top:16px;min-height:20px;*,*:before,*:after{box-sizing:border-box;}& input[type='checkbox']{display:none;}& input[type='checkbox']:checked + span:before{border-color:",
          [Function],
          ";background-color:",
          [Function],
          ";animation:",
          Keyframes {
            "id": "sc-keyframes-hVUBhf",
            "inject": [Function],
            "name": "hVUBhf",
            "rules": Array [
              "@-webkit-keyframes hVUBhf{0%{box-shadow:0px 0px 0px 1px rgba(0,0,0,0);}50%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0.1);}100%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0);}}",
              "@keyframes hVUBhf{0%{box-shadow:0px 0px 0px 1px rgba(0,0,0,0);}50%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0.1);}100%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0);}}",
            ],
            "toString": [Function],
          },
          " 0.2s linear forwards;}& input[type='checkbox']:checked + span:after{transform:rotateZ(37deg) scale(1);}& span{display:inline-flex;justify-content:flex-start;align-items:",
          [Function],
          ";height:20px;position:relative;padding:0 30px;margin-bottom:0;cursor:pointer;vertical-align:bottom;font-weight:normal;color:",
          [Function],
          ";font-size:",
          [Function],
          ";font-weight:",
          [Function],
          ";font-family:",
          [Function],
          ";}& span:before,& span:after{position:absolute;content:'';transition:all 0.3s ease;transition-property:transform,border-color;}& span:before{left:0;top:0;border-radius:4px;width:20px;height:20px;border:1px solid ",
          [Function],
          ";background-color:",
          [Function],
          ";}& span:after{top:1px;left:6px;width:7px;height:14px;transform:rotateZ(37deg) scale(0);border-top:2px solid transparent;border-left:2px solid transparent;border-right:2px solid #fafafa;border-bottom:2px solid #fafafa;}",
        ],
      },
      "displayName": "Checkboxstyles",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "Checkboxstyles-sc-1kxp1mv-0",
      "target": "label",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
/>
`;

exports[`Testing Checkbox Styles should render correctly without theme 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "Checkboxstyles-sc-1kxp1mv-0",
        "isStatic": false,
        "rules": Array [
          "margin-top:16px;min-height:20px;*,*:before,*:after{box-sizing:border-box;}& input[type='checkbox']{display:none;}& input[type='checkbox']:checked + span:before{border-color:",
          [Function],
          ";background-color:",
          [Function],
          ";animation:",
          Keyframes {
            "id": "sc-keyframes-hVUBhf",
            "inject": [Function],
            "name": "hVUBhf",
            "rules": Array [
              "@-webkit-keyframes hVUBhf{0%{box-shadow:0px 0px 0px 1px rgba(0,0,0,0);}50%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0.1);}100%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0);}}",
              "@keyframes hVUBhf{0%{box-shadow:0px 0px 0px 1px rgba(0,0,0,0);}50%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0.1);}100%{box-shadow:0px 0px 0px 15px rgba(0,0,0,0);}}",
            ],
            "toString": [Function],
          },
          " 0.2s linear forwards;}& input[type='checkbox']:checked + span:after{transform:rotateZ(37deg) scale(1);}& span{display:inline-flex;justify-content:flex-start;align-items:",
          [Function],
          ";height:20px;position:relative;padding:0 30px;margin-bottom:0;cursor:pointer;vertical-align:bottom;font-weight:normal;color:",
          [Function],
          ";font-size:",
          [Function],
          ";font-weight:",
          [Function],
          ";font-family:",
          [Function],
          ";}& span:before,& span:after{position:absolute;content:'';transition:all 0.3s ease;transition-property:transform,border-color;}& span:before{left:0;top:0;border-radius:4px;width:20px;height:20px;border:1px solid ",
          [Function],
          ";background-color:",
          [Function],
          ";}& span:after{top:1px;left:6px;width:7px;height:14px;transform:rotateZ(37deg) scale(0);border-top:2px solid transparent;border-left:2px solid transparent;border-right:2px solid #fafafa;border-bottom:2px solid #fafafa;}",
        ],
      },
      "displayName": "Checkboxstyles",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "Checkboxstyles-sc-1kxp1mv-0",
      "target": "label",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
  theme={
    Object {
      "checkbox": Object {
        "color": "#bbb",
        "label": "#aaa",
      },
    }
  }
/>
`;
